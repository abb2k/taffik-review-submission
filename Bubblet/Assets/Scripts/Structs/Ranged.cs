using System;
using System.Globalization;
using UnityEngine;

[System.Serializable]
public struct Ranged : IEquatable<Ranged>, IFormattable
{
    public float min;
    public float max;

    private float _random;
    //get the last know random number generated by generateRandom().
    public float knowRandom 
    { 
        get 
        { 
            return _random; 
        } 
        private set 
        { 
            _random = value; 
        } 
    }
    //generate a new random number between min and max
    public float newRandom 
    { 
        get 
        { 
            return UnityEngine.Random.Range(min, max); 
        } 
    }

    public bool Equals(Ranged other)
    {
        return other.min == this.min && other.max == this.max;
    }

    public override string ToString()
    {
        return ToString(null, null);
    }

    public string ToString(string format, IFormatProvider formatProvider)
    {
        if (string.IsNullOrEmpty(format))
        {
            format = "F2";
        }

        if (formatProvider == null)
        {
            formatProvider = CultureInfo.InvariantCulture.NumberFormat;
        }

        return string.Format("({0} - {1})", min.ToString(format, formatProvider), max.ToString(format, formatProvider));
    }

    //updates the known random value of the ranged to a random value between min and max
    public void generateRandom()
    {
        knowRandom = UnityEngine.Random.Range(min, max);
    }

    //gets the Mathf.Lerp between min and max via time
    public float Lerp(float time)
    {
        return Mathf.Lerp(min, max, time);
    }
}
